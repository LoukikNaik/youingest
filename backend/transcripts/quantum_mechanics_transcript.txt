Transcript for: Alan Turing: Crash Course Computer Science #15
=============================================================

[00:00:02 - 00:00:06]
Hi, I'm Kerry Ann and welcome to Crash Course computer science.

[00:00:06 - 00:00:09]
Over the past few episodes, we've been building up our understanding of computer science

[00:00:09 - 00:00:13]
fundamentals, such as functions, algorithms and data structures.

[00:00:13 - 00:00:15]
Today, we're going to take a step back and

[00:00:15 - 00:00:19]
look at the person who formulated many of the theoretical concepts that underline modern computation.

[00:00:19 - 00:00:24]
The father of computer science and not quite Benedict Cumberbatch lookalike Alan Turing.

[00:00:24 - 00:00:33]
[Crash Course intro playing]

[00:00:33 - 00:00:36]
Alan Mathison Turing was born in London in 1912

[00:00:36 - 00:00:40]
and showed an incredible aptitude for maths and science throughout his early education.

[00:00:40 - 00:00:46]
His first brush of what we now call computer science came in 1935 while he was a master's student at King's College in Cambridge.

[00:00:46 - 00:00:51]
He set out to solve a problem posed by German Mathematician David Hilbert known as the Entscheidungsproblem

[00:00:51 - 00:00:54]
or decision problem, which asked the following:

[00:00:54 - 00:00:58]
is there an algorithm that takes as input a statement written in formal logic, and

[00:00:58 - 00:01:01]
produces a "yes" or "no" answer that's always accurate?

[00:01:01 - 00:01:02]
If such an algorithm existed,

[00:01:02 - 00:01:06]
we could use it to answer questions like, "Is there a number bigger than all numbers?"

[00:01:06 - 00:01:08]
No, there's not. We know the answer to that one,

[00:01:08 - 00:01:11]
but there are many other questions in mathematics that we'd like to know the answer to.

[00:01:11 - 00:01:14]
So if this algorithm existed, we'd want to know it.

[00:01:14 - 00:01:19]
The American mathematician Alonzo Church first presented a solution to this problem in 1935.

[00:01:19 - 00:01:23]
He developed a system of mathematical expressions called Lambda Calculus

[00:01:23 - 00:01:26]
and demonstrated that no such universal algorithm could exist.

[00:01:26 - 00:01:30]
Although Lambda Calculus was capable of representing any computation,

[00:01:30 - 00:01:33]
the mathematical technique was difficult to apply and understand.

[00:01:33 - 00:01:35]
At pretty much the same time on the other side of the Atlantic,

[00:01:35 - 00:01:38]
Alan Turing came up with his own approach to solve the decision problem.

[00:01:38 - 00:01:43]
He proposed a hypothetical computing machine, which we now call a Turing Machine.

[00:01:43 - 00:01:45]
Turing Machines provided a simple, yet powerful

[00:01:45 - 00:01:47]
mathematical model of computation.

[00:01:47 - 00:01:49]
Although using totally different mathematics,

[00:01:49 - 00:01:53]
they were functionally equivalent to lambda calculus in terms of their computational power.

[00:01:54 - 00:01:58]
However their relative simplicity made them much more popular in the burgeoning field of computer science.

[00:01:58 - 00:02:02]
In fact, they're simple enough that I'm going to explain it right now.

[00:02:02 - 00:02:03]
A Turing Machine is a theoretical

[00:02:03 - 00:02:08]
computing device equipped with an infinitely long memory tape which stores symbols

[00:02:08 - 00:02:10]
and a device called a read/write head which can read and write, or

[00:02:10 - 00:02:12]
modify, symbols on that tape.

[00:02:12 - 00:02:15]
There's also a state variable in which we can hold a piece of information

[00:02:15 - 00:02:17]
about the current state of the machine.

[00:02:17 - 00:02:20]
And a set of rules that describes what the machine does.

[00:02:20 - 00:02:22]
Given a state and the current symbol the head is reading,

[00:02:22 - 00:02:25]
the rule can be to write a symbol on the tape change the state

[00:02:25 - 00:02:29]
of the machine move the read/write head to the left or right by one spot or any

[00:02:29 - 00:02:31]
combination of these actions.

[00:02:31 - 00:02:34]
To make this concrete let's work through a simple example:

[00:02:34 - 00:02:37]
a Turing Machine that reads a string of ones ending in a zero and

[00:02:37 - 00:02:40]
computes whether there is an even number of ones. If that's true

[00:02:40 - 00:02:45]
The machine will write a one to the tape and if it's false, it'll write a zero. First

[00:02:45 - 00:02:50]
We need to define our Turing machine rules. If the state is even and the current symbol of the tape is one,

[00:02:50 - 00:02:56]
then we update the machine state to odd and move the head to the right. On the other hand if the state is even and

[00:02:56 - 00:03:01]
The current symbol is zero, which means we've reached the end of the string of ones, then we write one to the tape and change

[00:03:01 - 00:03:05]
the state to halt, as in we're finished and the Turing machine has completed the

[00:03:05 - 00:03:08]
computation. We also need rules for when the Turing machine is in an odd state,

[00:03:08 - 00:03:12]
one rule for the symbol on the tape is a zero and another for when it is one.

[00:03:12 - 00:03:14]
Lastly we need to define a

[00:03:14 - 00:03:19]
Starting state, which we'll set to be even. Now we've defined the rules in the starting state of our Turing machine,

[00:03:19 - 00:03:25]
which is comparable to a computer program, we can run it on some example input. Let's say we store 1 1 0 onto tape.

[00:03:25 - 00:03:29]
That's two ones which means there is an even number of ones, and if that's news to you,

[00:03:29 - 00:03:31]
We should probably get working on crash course Math.

[00:03:31 - 00:03:35]
Notice that our rules only ever move their head to the right so the rest of the tape is irrelevant.

[00:03:36 - 00:03:42]
We'll leave it blank for simplicity. Our Turing machine is all ready to go so let's start it. Our state is even and the first

[00:03:42 - 00:03:45]
number we see is a one. That matches our topmost rule

[00:03:45 - 00:03:50]
and so we execute the effect, which is to update the state to odd and move the read/write head to the right by one spot.

[00:03:50 - 00:03:52]
Okay, now we see another one on the tape

[00:03:52 - 00:03:54]
But this time our state is odd

[00:03:54 - 00:03:59]
and so we execute our third rule which sets the state back to even and moves the head to the right. Now

[00:03:59 - 00:04:03]
we see a 0 and our current state is even so we execute our second rule

[00:04:03 - 00:04:06]
which is to write a 1 to the tape signifying that yes, it's true,

[00:04:06 - 00:04:10]
there is an even number of ones, and finally the machine halts.

[00:04:10 - 00:04:15]
That's how turing machines work pretty simple right so you might be wondering why there's such a big deal

[00:04:15 - 00:04:21]
Well cheering shows that this simple hypothetical machine can perform any computation if given enough time and memory

[00:04:21 - 00:04:24]
It's a general-purpose computer our program was a simple example

[00:04:25 - 00:04:31]
But with enough Rules states and tape you could build anything - a web browser, world of warcraft - whatever! Of course it would be

[00:04:31 - 00:04:34]
ridiculously inefficient, but it is theoretically possible.

[00:04:34 - 00:04:37]
And that's why, as a model of computing, it's such a powerful idea.

[00:04:37 - 00:04:40]
In fact in terms of what it can and cannot compute

[00:04:40 - 00:04:46]
there's no computer more powerful than a turing machine. A computer that is as powerful is called Turing complete

[00:04:46 - 00:04:54]
Every modern computing system your laptop your smartphone and even the little computer inside your microwave and thermostat are all Turing Complete.

[00:04:54 - 00:04:57]
To answer Hilbert's decision problem, Turing applied these new Turing machines to an intriguing

[00:04:58 - 00:05:01]
computational puzzle: the halting problem. Put simply this asks

[00:05:01 - 00:05:07]
"Is there an algorithm that can determine, given a description of a turing machine and the input from its tape,

[00:05:07 - 00:05:13]
whether the Machine will run forever or halt?" For example we know our Turing machine will halt when given the input 1 1 0

[00:05:13 - 00:05:18]
Because we literally walk through the example until it halted, but what about a more complex problem?

[00:05:18 - 00:05:20]
Is there a way to figure out if the program will halt without

[00:05:21 - 00:05:23]
executing it? Some programs might take years to run

[00:05:23 - 00:05:29]
so it would be useful to know before we run it and wait and wait and wait and then start getting worried and wonder and

[00:05:29 - 00:05:33]
Then decades later when you're old and gray control-alt-delete so much sadness

[00:05:34 - 00:05:40]
Unfortunately turing came up with a proof that shows the halting problem was in fact unsolvable, through a clever logical contradiction.

[00:05:40 - 00:05:42]
Let's Follow his reasoning. Imagine

[00:05:42 - 00:05:48]
we have a hypothetical Turing machine that takes a description of a program and some input for his tape and always outputs either

[00:05:48 - 00:05:52]
Yes, it halts or no, it doesn't and I'm going to give this machine a fun name

[00:05:52 - 00:05:56]
H for Holtz. Don't worry about how it works. Let's just assume such a machine exists

[00:05:56 - 00:05:59]
We're talking theory here. Turing reasoned if there existed a program

[00:05:59 - 00:06:03]
Whose halting behavior was not decidable by age it would mean the halting problem is

[00:06:03 - 00:06:09]
Unsolvable to find one Turing designed another Turing machine that built on top of H. If H says the program holds

[00:06:09 - 00:06:13]
Then we'll make our new machine loop forever. If the answer is no

[00:06:13 - 00:06:17]
It doesn't halt, we'll have the new machine output a no and halt. In essence

[00:06:17 - 00:06:23]
We're building a machine that does the opposite of what H says: halt if the program doesn't halt and run forever if the program halts

[00:06:23 - 00:06:27]
For this argument we'll also need to add a splitter to the front of our new machine

[00:06:27 - 00:06:34]
So that it accepts only one input and passes that as both the program and input into H. Let's call this new machine "Bizzaro"

[00:06:34 - 00:06:37]
So far this seems like a plausible machine, right?

[00:06:37 - 00:06:38]
Now it's going to get pretty complicated

[00:06:38 - 00:06:43]
But bear with me for a second. Look what happens when you pass Bizzaro a description of itself as the input

[00:06:43 - 00:06:47]
This means we're asking H what Bizzaro will do when asked to evaluate itself

[00:06:47 - 00:06:53]
But if H says Bizzaro halts then Bizzaro enters its infinite loop and thus doesn't halt

[00:06:53 - 00:06:57]
And if H says Bizarro doesn't halt then Bizzaro outputs a no and halts

[00:06:57 - 00:07:03]
so H can't possibly decide the halting problem correctly because there is no answer. It's a paradox and this paradox means

[00:07:03 - 00:07:10]
That the halting problem cannot be solved with Turing machines. Remember Turing proved that Turing machines could implement any computation

[00:07:10 - 00:07:16]
So this solution to the halting problem proves that not all problems can be solved by computation. Wow, that's some heavy stuff

[00:07:16 - 00:07:18]
I might have to watch that again myself.

[00:07:19 - 00:07:20]
Long story short Church

[00:07:20 - 00:07:26]
and Turing showed there were limits to the ability of computers no matter how much time or memory you have there are just some problems

[00:07:26 - 00:07:33]
that cannot be solved ever.

[00:07:36 - 00:07:37]
At this point in

[00:07:37 - 00:07:43]
1936 Turing was only 24 years old and really only just beginning his career. From 1936 through

[00:07:43 - 00:07:46]
1938 he completed a PhD at Princeton University

[00:07:46 - 00:07:50]
under the guidance of Church then after graduating he returned to Cambridge.

[00:07:51 - 00:07:52]
Shortly after in

[00:07:52 - 00:07:58]
1939 Britain became embroiled in World War II Turing's genius was quickly applied to the war effort. In fact a year before the war

[00:07:58 - 00:08:02]
Started he was already working part-time at the uk's government code and Cypher school

[00:08:02 - 00:08:08]
Which was the British code breaking group based out of Bletchley Park. One of his main efforts was figuring out how to decrypt German communications

[00:08:09 - 00:08:15]
Especially those that use the enigma machine. In short these machines scrambled text. Like you'd type the letters

[00:08:15 - 00:08:16]
H-E-L-L-O

[00:08:16 - 00:08:18]
and the letters XWDBJ

[00:08:18 - 00:08:20]
Would come out. This process is called encryption

[00:08:20 - 00:08:26]
The scrambling wasn't random. The behavior was defined by a series of re-orderable rotors on the top of the enigma machine

[00:08:26 - 00:08:33]
Each with 26 possible rotational positions. There was also a plug board at the front of the machine that allowed pairs of letters to be swapped

[00:08:33 - 00:08:40]
In total there were billions of possible settings. If you had your own enigma machine and you knew the correct rotor and plug board settings

[00:08:40 - 00:08:42]
You could type in XWDBJ

[00:08:42 - 00:08:46]
and hello would come out. In other words, you decrypted the message

[00:08:46 - 00:08:50]
Of course the German military wasn't sharing their enigma settings on Social Media

[00:08:50 - 00:08:54]
So the allies had to break the code with billions of Rotor and plug board combinations

[00:08:54 - 00:08:56]
There was no way to check them all by hand

[00:08:56 - 00:09:00]
Fortunately for Turing, enigma machines and the people who operated them were not perfect

[00:09:00 - 00:09:06]
Like one key flaw was that a letter would never be encoded as itself as in an h was never encrypted as an h

[00:09:06 - 00:09:10]
Turing, building on earlier work by Polish code breakers, designed a special-Purpose

[00:09:10 - 00:09:11]
electromechanical

[00:09:11 - 00:09:17]
Computer called the Bombe that took advantage of this flaw. It tried lots and lots of combinations of enigma settings

[00:09:17 - 00:09:22]
for a given encrypted message if the Bombe found a setting that led to a letter being encoded as itself

[00:09:22 - 00:09:28]
Which we know the real Enigma machine couldn't do, that combination was discarded then the machine moved on to try another combination

[00:09:29 - 00:09:32]
So Bombes were used to greatly narrow the number of Possible enigma settings

[00:09:32 - 00:09:36]
This allowed human code breakers to hone their efforts on the most probable solutions

[00:09:36 - 00:09:39]
Looking for things like common german words in fragments of decoded text

[00:09:40 - 00:09:47]
Periodically the Germans would suspect someone was decoding their communications and upgrade the enigma machine like they'd add another rotor creating many more combinations

[00:09:48 - 00:09:55]
they even built entirely new encryption machines. Throughout the war Turing and his colleagues at bletchley park worked tirelessly to defeat these mechanisms and

[00:09:56 - 00:09:58]
overall the intelligence gained from Decrypted German communications

[00:09:59 - 00:10:04]
Gave the allies an Edge in many theatres with some historians arguing it shortened the war by years

[00:10:04 - 00:10:07]
after the war turing returned to Academia and

[00:10:07 - 00:10:13]
Contributed to many early electronic computing efforts like the Manchester Mark 1 which was an early and influential stored-Program computer

[00:10:14 - 00:10:21]
But his most famous post-war contribution was to artificial intelligence, a field so new that it didn't even get that name until 1956

[00:10:21 - 00:10:22]
It's a huge topic

[00:10:22 - 00:10:24]
So we'll get to it again in future episodes

[00:10:25 - 00:10:31]
In 1950 Turing could envision a future where computers were powerful enough to exhibit intelligence equivalent to or at least

[00:10:32 - 00:10:33]
indistinguishable from that of a human

[00:10:33 - 00:10:37]
Turing postulated that a computer would deserve to be called intelligent

[00:10:37 - 00:10:43]
If it could deceive a human into believing that it was human. This became the basis of a simple test now called the turing test

[00:10:43 - 00:10:47]
Imagine that you are having a conversation with two different people not by voice or in person

[00:10:47 - 00:10:52]
But by sending typed notes back and forth. You can ask any questions you want and you get replies

[00:10:52 - 00:10:58]
But one of those two people is actually a computer. If you can't tell which one is human and which one is a computer then

[00:10:58 - 00:11:00]
the computer passes the test

[00:11:00 - 00:11:07]
There's a modern version of this test called a completely automated public turing test to tell computers and humans apart or captcha for short

[00:11:07 - 00:11:14]
These are frequently used on the internet to prevent automated systems from doing things like posting spam on Websites. I'll admit sometimes

[00:11:14 - 00:11:19]
I can't read what those squiggly things say. Does that mean I'm a computer? Normally in this series

[00:11:19 - 00:11:22]
We don't delve into the personal lives of these historical figures

[00:11:22 - 00:11:28]
But in Turing's case his name has been inextricably tied to tragedy so his story is worth mentioning

[00:11:28 - 00:11:35]
Turing was gay in a time when homosexuality was illegal in the united Kingdom and much of the world. An investigation into a 1952 Burglary

[00:11:36 - 00:11:43]
at his home revealed his sexual orientation to the authorities who charged him with gross indecency. Turing was convicted and given a choice between

[00:11:43 - 00:11:47]
Imprisonment or probation with hormonal treatments to suppress his sexuality

[00:11:47 - 00:11:52]
He chose the latter in part to continue his academic work, but it altered his mood and personality

[00:11:53 - 00:12:01]
Although the exact circumstances will never be known, it's most widely accepted that Alan Turing took his own life by poison in 1954

[00:12:01 - 00:12:07]
He was only 41. Many things have been named in recognition of Turing's contributions to theoretical computer science

[00:12:07 - 00:12:13]
But perhaps the most prestigious among them is the turing award the highest distinction in the field of computer science

[00:12:13 - 00:12:18]
Equivalent to a nobel prize in Physics, chemistry or other sciences. Despite a life cut short

[00:12:18 - 00:12:25]
Alan inspired th e first generation of computer scientists and laid key groundwork that enabled a digital era we get to enjoy today

[00:12:25 - 00:12:32]
I'll see you next week. Crash course computer science is produced in association with PBS digital studios at their channel

[00:12:32 - 00:12:34]
You can check out our pla ylist to show like gross science

[00:12:35 - 00:12:41]
ACS  reactions and the art assignment. this episode was filmed at the Chad and stacey Emigholz studio in Indianapolis, Indiana

[00:12:41 - 00:12:46]
And it was made with the help of all these nice people and a wonderful graphics team thought cafe

[00:12:46 - 00:12:48]
Thanks for watching and try turning it off and then back [on] again
